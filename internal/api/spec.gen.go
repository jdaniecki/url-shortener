// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RSzW7bMAx+FYFnw3aTHgrdussQIIciRU5DD6rMxCpkSRPpYEHgdx8oJ+uS5jBgJxsi",
	"+ZHfzwlc2EXQJ+iQbHaJXQyg4VmRG5JH9fyyUhwV9TEzBrXdrAkqYMceQcN2s1avcwmz9EIFB8w0g7T1",
	"Q93CVEFMGExyoGFZt3ULFSTDPcna5ows/ykSyzcmzEYOWXWg4SUSn3dABRl/jkj8LXZHabUxMIYyZVLy",
	"zpa55oNiQSTb42AKdhZUdli2jtnLB38ZIQkaeuZEumnOL7WNg9A8JikSZxf2ME1/XuL7B1qGSZ7kIpex",
	"A815xPJAKQaaNy3a9j/uLOJs7x2rm1m5esy+Me/2YbH814OvnX4drUWi3ej98WIzdmK0OPc4n389sgoH",
	"413pUTQKHezKMhqHweSjoJ7zYmagqYLmdCEzCeIe71j9HWenhbFkJJsBGTOB/iFBBV1yAxUEMxSen83X",
	"LlR/KXqryduNQ8t28ZXiBjuX0bILe4k/96hidnsXjP+U5vHrnEgSIqtdHMOtJhfM+4ClF/PhQvcadx2t",
	"8WquQzXn95IDL7U+Euun9qmF6W36HQAA//8eAEuq1gMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
